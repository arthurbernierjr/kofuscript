// Generated by MambaScript 0.4.2 
var present = console.log; 
// Generated by MambaScript 0.4.2 
var black, cache, elements, mamba, mambascript_helpers, merge_elements, skeleton, skeleton, skeleton;
black = module.exports;
mamba = require('../lib/light-module');
black.version = '0.1.3';
black.doctypes = {
  'default': '<!DOCTYPE html>',
  '5': '<!DOCTYPE html>',
  xml: '<?xml version="1.0" encoding="utf-8" ?>',
  transitional: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
  strict: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
  frameset: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
  '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
  basic: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
  mobile: '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
  ce: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
};
mambascript_helpers = 'var present = console.log;'.replace(/\n/g, '');
elements = {
  regular: 'a abbr address article aside audio b bdi bdo blockquote body button\n canvas caption cite code colgroup datalist dd del details dfn div dl dt em\n fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup\n html i iframe ins kbd label legend li main map mark menu meter nav noscript object\n ol optgroup option output p pre progress q rp rt ruby s samp script section\n select small span strong style sub summary sup table tbody td textarea tfoot\n th thead time title tr u ul video',
  'void': 'area base br col command embed hr img input keygen link meta param\n source track wbr',
  obsolete: 'applet acronym bgsound dir frameset noframes isindex listing\n nextid noembed plaintext rb strike xmp big blink center font marquee multicol\n nobr spacer tt',
  obsolete_void: 'basefont frame'
};
merge_elements = function () {
  var a, args, element, result;
  args = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
  result = [];
  for (var i$ = 0, length$ = args.length; i$ < length$; ++i$) {
    a = args[i$];
    for (var cache$ = elements[a].split(' '), i$1 = 0, length$1 = cache$.length; i$1 < length$1; ++i$1) {
      element = cache$[i$1];
      if (!in$(element, result))
        result.push(element);
    }
  }
  return result;
};
black.tags = merge_elements('regular', 'obsolete', 'void', 'obsolete_void');
black.self_closing = merge_elements('void', 'obsolete_void');
skeleton = function (data) {
  var __bm, comment, doctype, h, ie, mambascript, tag, text, yieldMe;
  if (null == data)
    data = {};
  if (null != data.format)
    data.format;
  else
    data.format = false;
  if (null != data.autoescape)
    data.autoescape;
  else
    data.autoescape = false;
  __bm = {
    buffer: [],
    esc: function (txt) {
      if (data.autoescape) {
        return h(txt);
      } else {
        return String(txt);
      }
    },
    tabs: 0,
    repeat: function (string, count) {
      return Array(count + 1).join(string);
    },
    indent: function () {
      if (data.format)
        return text(this.repeat('  ', this.tabs));
    },
    tag: function (name, args) {
      var combo, i;
      combo = [name];
      for (var i$ = 0, length$ = args.length; i$ < length$; ++i$) {
        i = args[i$];
        combo.push(i);
      }
      return tag.apply(data, combo);
    },
    render_idclass: function (str) {
      var c, classes, i, id;
      classes = [];
      for (var cache$ = str.split('.'), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        i = cache$[i$];
        if (in$('#', i)) {
          id = i.replace('#', '');
        } else if (!(i === '')) {
          classes.push(i);
        }
      }
      if (id)
        text(' id="' + id + '"');
      if (classes.length > 0) {
        text(' class="');
        for (var i$1 = 0, length$1 = classes.length; i$1 < length$1; ++i$1) {
          c = classes[i$1];
          if (!(c === classes[0]))
            text(' ');
          text(c);
        }
        return text('"');
      }
    },
    render_attrs: function (obj, prefix) {
      var k, v;
      if (null == prefix)
        prefix = '';
      return function (accum$) {
        for (k in obj) {
          v = obj[k];
          if (typeof v === 'boolean' && v)
            v = k;
          if (typeof v === 'function')
            v = '(' + v + ').call(this);';
          accum$.push(typeof v === 'object' && !(v instanceof Array) ? this.render_attrs(v, prefix + k + '-') : v ? text(' ' + (prefix + k) + '="' + this.esc(v) + '"') : void 0);
        }
        return accum$;
      }.call(this, []);
    },
    render_contents: function (contents) {
      var result;
      switch (typeof contents) {
      case 'string':
      case 'number':
      case 'boolean':
        return text(this.esc(contents));
      case 'function':
        if (data.format)
          text('\n');
        this.tabs++;
        result = contents.call(data);
        if (typeof result === 'string') {
          this.indent();
          text(this.esc(result));
          if (data.format)
            text('\n');
        }
        this.tabs--;
        return this.indent();
      }
    },
    render_tag: function (name, idclass, attrs, contents) {
      this.indent();
      text('<' + name);
      if (idclass)
        this.render_idclass(idclass);
      if (attrs)
        this.render_attrs(attrs);
      if (this.self_closing.includes(name)) {
        text(' />');
        if (data.format)
          text('\n');
      } else {
        text('>');
        this.render_contents(contents);
        text('</' + name + '>');
        if (data.format)
          text('\n');
      }
      return null;
    }
  };
  tag = function (name) {
    var a, args, attrs, contents, idclass;
    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
    for (var i$ = 0, length$ = args.length; i$ < length$; ++i$) {
      a = args[i$];
      switch (typeof a) {
      case 'function':
        contents = a;
        break;
      case 'object':
        attrs = a;
        break;
      case 'number':
      case 'boolean':
        contents = a;
        break;
      case 'string':
        if (args.length === 1) {
          contents = a;
        } else if (a === args[0]) {
          idclass = a;
        } else {
          contents = a;
        }
      }
    }
    return __bm.render_tag(name, idclass, attrs, contents);
  };
  yieldMe = function (f) {
    var old_buffer, temp_buffer;
    temp_buffer = [];
    old_buffer = __bm.buffer;
    __bm.buffer = temp_buffer;
    f();
    __bm.buffer = old_buffer;
    return temp_buffer.join('');
  };
  h = function (txt) {
    return String(txt).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };
  doctype = function (type) {
    if (null == type)
      type = 'default';
    text(__bm.doctypes[type]);
    if (data.format)
      return text('\n');
  };
  text = function (txt) {
    __bm.buffer.push(String(txt));
    return null;
  };
  comment = function (cmt) {
    text('<!--' + cmt + '-->');
    if (data.format)
      return text('\n');
  };
  mambascript = function (param) {
    switch (typeof param) {
    case 'function':
      return script('' + __bm.mambascript_helpers + '(' + param + ').call(this);');
    case 'string':
      return script({ type: 'text/mambascript' }, function () {
        return param;
      });
    case 'object':
      param.type = 'text/mambascript';
      return script(param);
    }
  };
  ie = function (condition, contents) {
    __bm.indent();
    text('<!--[if ' + condition + ']>');
    __bm.render_contents(contents);
    text('<![endif]-->');
    if (data.format)
      return text('\n');
  };
  return null;
};
skeleton = String(skeleton).replace(/function\s*\(.*\)\s*\{/, '').replace(/return null;\s*\}$/, '');
skeleton = mambascript_helpers + skeleton;
black.compile = function (template, options) {
  var code, hardcoded_locals, k, t, tag_functions, tags_used, v;
  if (null == options)
    options = {};
  if (typeof template === 'function') {
    template = String(template);
  } else if (typeof template === 'string' && null != mamba) {
    template = mamba.smoothCompile(template, { bare: true });
    template = 'function(){' + template + '}';
  }
  hardcoded_locals = '';
  if (options.hardcode)
    for (k in options.hardcode) {
      v = options.hardcode[k];
      if (typeof v === 'function') {
        hardcoded_locals += 'var ' + k + ' = function(){return (' + v + ').apply(data, arguments);};';
      } else {
        hardcoded_locals += 'var ' + k + ' = ' + JSON.stringify(v) + ';';
      }
    }
  tag_functions = '';
  tags_used = [];
  for (var i$ = 0, length$ = black.tags.length; i$ < length$; ++i$) {
    t = black.tags[i$];
    if (template.indexOf(t) > -1 || hardcoded_locals.indexOf(t) > -1)
      tags_used.push(t);
  }
  tag_functions += 'var ' + tags_used.join(',') + ';';
  for (var i$1 = 0, length$1 = tags_used.length; i$1 < length$1; ++i$1) {
    t = tags_used[i$1];
    tag_functions += '' + t + " = function(){return __bm.tag('" + t + "', arguments);};";
  }
  code = tag_functions + hardcoded_locals + skeleton;
  code += '__bm.doctypes = ' + JSON.stringify(black.doctypes) + ';';
  code += '__bm.mambascript_helpers = ' + JSON.stringify(mambascript_helpers) + ';';
  code += '__bm.self_closing = ' + JSON.stringify(black.self_closing) + ';';
  if (options.locals)
    code += 'with(data.locals){';
  code += '(' + template + ').call(data);';
  if (options.locals)
    code += '}';
  code += "return __bm.buffer.join('');";
  return new Function('data', code);
};
cache = {};
black.render = function (template, data, options) {
  var k, tpl, v;
  if (null == data)
    data = {};
  if (null == options)
    options = {};
  for (k in options) {
    v = options[k];
    data[k] = v;
  }
  if (null != data.cache)
    data.cache;
  else
    data.cache = false;
  if (data.cache && null != cache[template]) {
    tpl = cache[template];
  } else if (data.cache) {
    tpl = cache[template] = black.compile(template, data);
  } else {
    tpl = black.compile(template, data);
  }
  return tpl(data);
};
if (!('undefined' !== typeof window && null != window))
  black.adapters = {
    simple: black.render,
    meryl: black.render,
    express: {
      TemplateError: function (super$) {
        extends$(class$, super$);
        function class$(param$) {
          this.message = param$;
          Error.prototype.constructor.apply(this, arguments);
          Error.call(this, this.message);
          Error.captureStackTrace(this, arguments.callee);
        }
        class$.prototype.name = 'TemplateError';
        return class$;
      }(Error),
      compile: function (template, data) {
        var e, TemplateError, tpl;
        if (null != data.hardcode)
          data.hardcode;
        else
          data.hardcode = {};
        data.hardcode.partial = function () {
          return text(this.partial.apply(this, arguments));
        };
        TemplateError = this.TemplateError;
        try {
          tpl = black.compile(template, data);
        } catch (e$) {
          e = e$;
          throw new TemplateError('Error compiling ' + data.filename + ': ' + e.message);
        }
        return function () {
          try {
            return tpl.apply(null, [].slice.call(arguments));
          } catch (e$1) {
            e = e$1;
            throw new TemplateError('Error rendering ' + data.filename + ': ' + e.message);
          }
        };
      }
    }
  };
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
