// Generated by MambaScript 0.4.0 
var present = console.log; 
// Generated by MambaScript 0.4.0 
var Compiler, cscodegen, Decision, escodegen, escodegenFormat, ESMRewriter, ext, formatParserError, MambaScript, MambaView, Nodes, Optimiser, Parser, pkg, Preprocessor, reporter, TypeError, TypeWalker;
formatParserError = require('./helpers').formatParserError;
Nodes = require('./nodes');
Preprocessor = require('./preprocessor').Preprocessor;
Parser = require('./parser');
TypeWalker = require('./type-walker');
Optimiser = require('./optimiser').Optimiser;
Compiler = require('./compiler').Compiler;
reporter = require('./reporter');
TypeError = require('./type-helpers').TypeError;
cscodegen = function () {
  try {
    return require('cscodegen');
  } catch (e$) {
    return;
  }
}.call(this);
escodegen = function () {
  try {
    return require('escodegen');
  } catch (e$1) {
    return;
  }
}.call(this);
ESMRewriter = require('../utils/esm');
MambaView = require('./black');
Decision = require('./decision');
pkg = require('./../package.json');
escodegenFormat = {
  indent: {
    style: '  ',
    base: 0
  },
  renumber: true,
  hexadecimal: true,
  quotes: 'auto',
  parentheses: false
};
MambaScript = {
  MambaScript: MambaScript,
  Compiler: Compiler,
  Optimiser: Optimiser,
  Parser: Parser,
  Preprocessor: Preprocessor,
  Nodes: Nodes,
  MambaView: MambaView,
  Decision: Decision,
  VERSION: pkg.version,
  parse: function (mamba, options) {
    var e, parsed, preprocessed;
    if (null == options)
      options = {};
    try {
      preprocessed = Preprocessor.process(mamba, { literate: options.literate });
      parsed = Parser.parse(preprocessed, {
        raw: options.raw,
        inputSource: options.inputSource
      });
      TypeWalker.checkNodes(parsed);
      if (reporter.has_errors())
        throw new TypeError(reporter.report());
      return options.optimise ? Optimiser.optimise(parsed) : parsed;
    } catch (e$2) {
      e = e$2;
      if (e instanceof TypeError)
        throw e.message;
      if (!(e instanceof Parser.SyntaxError))
        throw e;
      throw new Error(formatParserError(preprocessed, e));
    }
  },
  esCompile: function (mamba, options) {
    var jsAST, msAst;
    if (null == options)
      options = {};
    msAst = this.parse(mamba);
    jsAST = this.compile(msAst, { bare: true });
    return this.jsEsm(jsAST);
  },
  compile: function (msAst, options) {
    return Compiler.compile(msAst, options).toBasicObject();
  },
  compileTypedToCS: function (msAst, options) {
    return cscodegen(msAst);
  },
  cs: function (msAst, options) {
  },
  jsWithSourceMap: function (jsAst, name, options) {
    var targetName;
    if (null == name)
      name = 'unknown';
    if (null == options)
      options = {};
    if (!(null != escodegen))
      throw new Error('escodegen not found: run `npm install escodegen`');
    if (!{}.hasOwnProperty.call(jsAst, 'type'))
      jsAst = jsAst.toBasicObject();
    targetName = options.sourceMapFile || options.sourceMap && options.output.match(/^.*[\\\/]([^\\\/]+)$/)[1];
    return escodegen.generate(jsAst, {
      comment: !options.compact,
      sourceMapWithCode: true,
      sourceMap: name,
      file: targetName || 'unknown',
      format: options.compact ? escodegen.FORMAT_MINIFY : null != options.format ? options.format : escodegenFormat
    });
  },
  jsEsm: function (jsAst, options) {
    var code;
    code = this.jsWithSourceMap(jsAst, null, options).code;
    return ESMRewriter(code);
  },
  js: function (jsAst, options) {
    return this.jsWithSourceMap(jsAst, null, options).code;
  },
  sourceMap: function (jsAst, name, options) {
    return this.jsWithSourceMap(jsAst, name, options).map;
  },
  cs2js: function (input, options) {
    var jsAst, msAst;
    if (null == options)
      options = {};
    if (null != options.optimise)
      options.optimise;
    else
      options.optimise = true;
    msAst = MambaScript.parse(input, options);
    jsAst = MambaScript.compile(msAst, { bare: options.bare });
    return MambaScript.js(jsAst, { compact: options.compact || options.minify });
  },
  smoothCompile: function (input, options) {
    var jsAst, msAst;
    if (null == options)
      options = {};
    if (null != options.optimise)
      options.optimise;
    else
      options.optimise = true;
    msAst = MambaScript.parse(input, options);
    jsAst = MambaScript.compile(msAst, { bare: true });
    return MambaScript.jsEsm(jsAst, { compact: options.compact || options.minify });
  },
  svelteCompile: function (input) {
    var options;
    options = {
      optimize: true,
      bare: true,
      header: true,
      compact: true
    };
    return this.cs2js(input, options);
  }
};
module.exports = MambaScript;
if (null != (null != require.extensions ? require.extensions['.node'] : void 0)) {
  MambaScript.register = function () {
    return require('./register');
  };
  for (var cache$ = [
        '.coffee',
        '.litcoffee',
        '.mamba'
      ], i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
    ext = cache$[i$];
    if (null != require.extensions[ext])
      require.extensions[ext];
    else
      require.extensions[ext] = function () {
        throw new Error('Hey make sure to Use MambaScript.register() or require the register module to require ' + ext + ' files.');
      };
  }
}
