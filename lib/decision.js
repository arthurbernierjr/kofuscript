// Generated by MambaScript 0.5.1 
var present = console.log; 
// Generated by MambaScript 0.5.1 
var Decision, elements, merge_elements, tagName, tagName;
elements = {
  regular: 'a abbr address article aside audio b bdi bdo blockquote body button\n canvas caption cite code colgroup datalist dd del details dfn div dl dt em\n fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup\n html i iframe ins kbd label legend li map mark menu meter nav noscript object\n ol optgroup option output p pre progress q rp rt ruby s samp script section\n select small span strong sub summary sup table tbody td textarea tfoot\n th thead time title tr u ul video',
  'void': 'area base br col command embed hr img input keygen link meta param\n source track wbr',
  obsolete: 'applet acronym bgsound dir frameset noframes isindex listing\n nextid noembed plaintext rb strike xmp big blink center font marquee multicol\n nobr spacer tt',
  obsolete_void: 'basefont frame'
};
merge_elements = function () {
  var a, args, element, result;
  args = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
  result = [];
  for (var i$ = 0, length$ = args.length; i$ < length$; ++i$) {
    a = args[i$];
    for (var cache$ = elements[a].split(' '), i$1 = 0, length$1 = cache$.length; i$1 < length$1; ++i$1) {
      element = cache$[i$1];
      if (!in$(element, result))
        result.push(element);
    }
  }
  return result;
};
Decision = function () {
  function Decision(Pragma) {
    this.stack = null;
    this.Pragma = Pragma;
  }
  Decision.prototype.resetStack = function (stack) {
    var previous;
    if (null == stack)
      stack = null;
    previous = this.stack;
    this.stack = stack;
    return previous;
  };
  Decision.prototype.isSelector = function (string) {
    return string.length > 1 && in$(string.charAt(0), [
      '#',
      '.'
    ]);
  };
  Decision.prototype.parseSelector = function (selector) {
    var cache$1, classes, id, klass, token;
    id = null;
    classes = [];
    for (var cache$ = selector.split('.'), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
      token = cache$[i$];
      token = token.trim();
      if (id) {
        classes.push(token);
      } else {
        cache$1 = token.split('#');
        klass = cache$1[0];
        id = cache$1[1];
        if (!(klass === ''))
          classes.push(token);
      }
    }
    return {
      id: id,
      classes: classes
    };
  };
  Decision.prototype.normalizeArgs = function (args) {
    var arg, attrs, cache$, classes, contents, dataAttrs, id, index, k, parsedSelector, selector, v;
    attrs = {};
    selector = null;
    contents = null;
    for (var i$ = 0, length$ = args.length; i$ < length$; ++i$) {
      arg = args[i$];
      index = i$;
      if (!('undefined' !== typeof arg && null != arg))
        continue;
      switch (typeof arg) {
      case 'string':
        if (index === 0 && this.isSelector(arg)) {
          selector = arg;
          parsedSelector = this.parseSelector(arg);
        } else {
          contents = arg;
        }
        break;
      case 'function':
      case 'number':
      case 'boolean':
        contents = arg;
        break;
      case 'object':
        if (arg.constructor === Object && !this.Pragma.isValidElement(arg)) {
          attrs = Object.keys(arg).reduce(function (clone, key) {
            clone[key] = arg[key];
            return clone;
          }, {});
        } else {
          contents = arg;
        }
        break;
      default:
        contents = arg;
      }
    }
    if (null != parsedSelector) {
      cache$ = parsedSelector;
      id = cache$.id;
      classes = cache$.classes;
      if (null != id)
        attrs.id = id;
      if (null != classes ? classes.length : void 0) {
        if (attrs.className)
          classes.push(attrs.className);
        attrs.className = classes.join(' ');
      }
    }
    dataAttrs = attrs.data;
    if (typeof dataAttrs === 'object') {
      delete attrs.data;
      for (k in dataAttrs) {
        v = dataAttrs[k];
        attrs['data-' + k] = v;
      }
    }
    return {
      attrs: attrs,
      contents: contents,
      selector: selector
    };
  };
  Decision.prototype.$ = function (tagName) {
    var args, attrs, cache$, children, contents, el, previous;
    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
    if (!(null != tagName))
      throw new Error('Element type is invalid big dog:\nCheck this out I expected a string from you or a class/function because thats how I know its a component\nbut instead I got: ' + tagName + ' lets figure this out together? Is ' + tagname + ' as string or class/function\nIf you are certain it is, if its a string then its not one of the built in tags i.e div or section, so it wont work,\nif its a class or function did you forget to require it? Or maybe did you forget export it from the file you came from?\nDid you save the file? Just a few suggestions to get the wheels turning. This error shall pass');
    cache$ = this.normalizeArgs(args);
    attrs = cache$.attrs;
    contents = cache$.contents;
    switch (typeof contents) {
    case 'function':
      previous = this.resetStack([]);
      contents();
      children = this.resetStack(previous);
      break;
    default:
      children = contents;
    }
    if (null != children ? children.splice : void 0) {
      el = this.Pragma.createElement.apply(this.Pragma, [
        tagName,
        attrs
      ].concat([].slice.call(children)));
    } else {
      el = this.Pragma.createElement(tagName, attrs, children);
    }
    if (null != this.stack)
      this.stack.push(el);
    return el;
  };
  Decision.prototype.pureComponent = function (contents) {
    var decision;
    decision = this;
    return function () {
      var children, previous;
      previous = decision.resetStack(null);
      children = contents.apply(decision, arguments);
      decision.resetStack(previous);
      return children;
    };
  };
  Decision.prototype.selfClosingTag = function (tagName) {
    var args, attrs, cache$, contents;
    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
    cache$ = this.normalizeArgs(args);
    attrs = cache$.attrs;
    contents = cache$.contents;
    if (contents)
      throw new Error('Decision.Mamba: <' + tagName + '/> must not have content big dog because its a self closing tag.\nIt looks like you tried to nest ' + contents + " no big deal though everyone has errors,\nif this isn't even what you meant to do look around at your surrounding items and see where you have a curly brace,\ncomma, semicolon, or indent in the wrong spot. You got this, this error shall fade away.");
    return this.$(tagName, attrs);
  };
  Decision.prototype.text = function (s) {
    if (!(null != s ? s.toString : void 0))
      return s;
    if (null != this.stack)
      this.stack.push(s.toString());
    return s.toString();
  };
  Decision.prototype.use = function (plugin) {
    return plugin(this);
  };
  Decision.prototype.tags = function () {
    var bound, boundMethodNames, method;
    bound = {};
    boundMethodNames = [].concat('ie normalizeArgs script $ pureComponent text use'.split(' '), merge_elements('regular', 'obsolete', 'void', 'obsolete_void'));
    for (var i$ = 0, length$ = boundMethodNames.length; i$ < length$; ++i$) {
      method = boundMethodNames[i$];
      (function (this$) {
        return function (method) {
          return bound[method] = function (this$1) {
            return function () {
              var args;
              args = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
              return this$1[method].apply(this$1, args);
            };
          }(this$);
        };
      }(this)(method));
    }
    bound.$.text = bound.text;
    return bound;
  };
  return Decision;
}();
for (var cache$ = merge_elements('regular', 'obsolete'), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
  tagName = cache$[i$];
  (function (tagName) {
    return Decision.prototype[tagName] = function () {
      var args;
      args = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
      return this.$.apply(this, [tagName].concat([].slice.call(args)));
    };
  }(tagName));
}
for (var cache$1 = merge_elements('void', 'obsolete_void'), i$1 = 0, length$1 = cache$1.length; i$1 < length$1; ++i$1) {
  tagName = cache$1[i$1];
  (function (tagName) {
    return Decision.prototype[tagName] = function () {
      var args;
      args = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, [tagName].concat([].slice.call(args)));
    };
  }(tagName));
}
if ('undefined' !== typeof module && null != module ? module.exports : void 0) {
  module.exports = function (Pragma) {
    return new Decision(Pragma).tags();
  };
  module.exports.Decision = Decision;
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
