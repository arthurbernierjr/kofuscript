// Generated by MambaScript 0.3.8 
var present = console.log; 
// Generated by MambaScript 0.3.8 
var argv, child_process, compile, fork, fs, mambaBinary, MambaScript, path, runModule;
child_process = require('child_process');
fs = require('fs');
path = require('path');
MambaScript = require('./module');
runModule = require('./run').runModule;
module.exports = !(null != require.extensions['.coffee']);
argv = require('kofu-optimist').boolean('self').argv;
compile = function (module, filename, opts) {
  var csAst, input, js, jsAst;
  input = fs.readFileSync(filename, 'utf8');
  csAst = MambaScript.parse(input, opts);
  jsAst = MambaScript.compile(csAst);
  js = MambaScript.js(jsAst);
  return runModule(module, js, jsAst, filename);
};
require.extensions['.coffee'] = function (module, filename) {
  return compile(module, filename, { raw: true });
};
require.extensions['.litcoffee'] = function (module, filename) {
  return compile(module, filename, {
    raw: true,
    literate: true
  });
};
require.extensions['.mamba'] = function (module, filename) {
  return compile(module, filename, {
    raw: true,
    typeCheck: true,
    literate: true
  });
};
fork = child_process.fork;
if (!fork.mambaPatched) {
  mambaBinary = path.resolve('bin', 'mamba');
  child_process.fork = function (file, args, options) {
    if (null == args)
      args = [];
    if (null == options)
      options = {};
    if (in$(path.extname(file), [
        '.coffee',
        '.litcoffee',
        '.mamba'
      ])) {
      if (!Array.isArray(args)) {
        args = [];
        options = args || {};
      }
      options.execPath || (options.execPath = mambaBinary);
    }
    return fork(file, args, options);
  };
  child_process.fork.mambaPatched = true;
}
delete require.cache[__filename];
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
