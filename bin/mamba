#!/usr/bin/env node

// Generated by MambaScript 0.2.1
var present = console.log;
// Generated by MambaScript 0.2.1
var argv, Code, code, code, code, code, codes, codes, compileFromSourceToJS, cs_ast, cs_ast, mscodegen, debug, e, e, escodegen, exec, extReplacer, extReplacer, filepaths, filepaths, fpath, fpath, fpath, fs, joined, joined, js_ast, js_ast, literate, literate, MambaScript, mode, moduleCode, name, name, outpath, outpath, outpath, outpath, path, Preprocessor, Preprocessor, repl, reporter, result, result, run, runMain, source, source, source, spawn;
fs = require('fs');
path = require('path');
MambaScript = require('../lib/module');
cache$ = require('child_process');
exec = cache$.exec;
spawn = cache$.spawn;
mscodegen = require('mambacodegen');
escodegen = require('escodegen');
repl = require('../lib/repl');
reporter = require('../lib/reporter');
debug = require('../lib/helpers').debug;
argv = require('kofu-optimist').boolean('compile').boolean('bare').boolean('scope').boolean('self').boolean('print').boolean('svelte').alias('c', 'compile').alias('e', 'execute').alias('b', 'bare').alias('o', 'out').alias('j', 'join').alias('d', 'debug').alias('z', 'svelte').argv;
runMain = require('../lib/run').runMain;
compileFromSourceToJS = function (source, param$) {
  var cache$1, compileOption, compileOptions, cs_ast, js_ast, parseOption;
  if (null == param$)
    param$ = {};
  {
    cache$1 = param$;
    parseOption = cache$1.parseOption;
    compileOption = cache$1.compileOption;
  }
  cs_ast = MambaScript.parse(source, null != parseOption ? parseOption : {
    optimise: true,
    raw: true,
    inputSource: source,
    sourceMap: true,
    literate: literate
  });
  compileOptions = {
    bare: true,
    header: true
  };
  js_ast = MambaScript.compileTypedToCS(cs_ast, null != compileOptions ? compileOptions : { bare: !!argv.bare });
  return MambaScript.js(js_ast, compileOptions);
};
run = function (fname, source, param$) {
  var cache$1, compileOption, compileOptions, cs_ast, js, js_ast, parseOption;
  if (null == param$)
    param$ = {};
  {
    cache$1 = param$;
    parseOption = cache$1.parseOption;
    compileOption = cache$1.compileOption;
  }
  cs_ast = MambaScript.parse(source, null != parseOption ? parseOption : {
    optimise: true,
    raw: true,
    inputSource: source,
    sourceMap: true,
    literate: literate
  });
  compileOptions = {
    bare: true,
    header: true
  };
  js_ast = MambaScript.compile(cs_ast, null != compileOptions ? compileOptions : { bare: !!argv.bare });
  js = escodegen.generate(js_ast);
  return runMain(source, js, js_ast, fname);
};
mode = function () {
  switch (false) {
  case !(argv.z || argv.svelte):
    return 'svelte';
  case !(argv.c || argv.compile):
    return 'compile';
  case !(argv.e || argv.execute):
    return 'execute';
  case !(argv._.length > 0):
    return 'execute';
  default:
    return 'repl';
  }
}.call(this);
moduleCode = 'var _include_,_module_;_module_=function(e){return function(t,n,r){var i,s,o,u,a,f,l;r==null&&(r=o),o=(f=typeof window!=="undefined"&&window!==null?window:global)!=null?f:e,r==null&&(r=o),i=[],l=t.split(".");for(u=0,a=l.length;u<a;u++)s=l[u],r[s]==null&&(r[s]={}),r=r[s],i.push(r);return n.apply(r,i)}}(this),_include_=function(e,t){var n,r;for(n in t)r=t[n],e[n]=r;return t}; var present=console.log;';
Code = function () {
  Code.join = function (codes, to) {
    var c;
    c = new Code({
      from: function (accum$) {
        for (var i$ = 0, length$ = codes.length; i$ < length$; ++i$) {
          c = codes[i$];
          accum$.push(c.from);
        }
        return accum$;
      }.call(this, []),
      to: to,
      code: function (accum$1) {
        for (var i$1 = 0, length$1 = codes.length; i$1 < length$1; ++i$1) {
          c = codes[i$1];
          accum$1.push(c.code);
        }
        return accum$1;
      }.call(this, []).join('\n')
    });
    return c;
  };
  function Code(param$) {
    var cache$1;
    {
      cache$1 = param$;
      this.from = cache$1.from;
      this.to = cache$1.to;
      this.code = cache$1.code;
    }
  }
  Code.prototype.writeSync = function () {
    var err;
    err = fs.writeFileSync(this.to, this.code);
    if (err)
      throw err;
    return console.log('compile:', this.from, '->', this.to);
  };
  Code.prototype.write = function (callback) {
    if (global._root_.hasModule)
      this.code = moduleCode + '\n' + this.code;
    return fs.writeFile(this.to, this.code, function (this$) {
      return function (err) {
        if (err)
          throw err;
        console.log('compile:', this$.from, '->', this$.to);
        if ('function' === typeof callback)
          return callback();
      };
    }(this));
  };
  return Code;
}();
switch (mode) {
case 'svelte':
  Preprocessor = require('../lib/preprocessor').Preprocessor;
  literate = argv.literate;
  filepaths = argv._;
  result = '';
  codes = [];
  for (var i$ = 0, length$ = filepaths.length; i$ < length$; ++i$) {
    fpath = filepaths[i$];
    source = fs.readFileSync(fpath).toString();
    try {
      cs_ast = MambaScript.parse(source, {
        optimise: false,
        raw: true,
        sourceMap: true,
        inputSource: source,
        literate: literate
      });
    } catch (e$) {
      e = e$;
      console.error('Greetings from the svelteCompile Function in the mamba executable My dude no big deal but you have an Error at', fpath);
      throw e;
      process.exit(1);
    }
    if (argv.csast) {
      console.log(cs_ast);
      return;
    }
    if (argv.mscodegen) {
      console.log(mscodegen.generate(cs_ast));
      return;
    }
    js_ast = MambaScript.compile(cs_ast, { bare: true });
    code = MambaScript.jsEsm(js_ast);
    extReplacer = function (name) {
      return name.replace('.typed.coffee', '.js').replace('.tcoffee', '.js').replace('.coffee', '.js').replace('.mamba', '.js');
    };
    outpath = argv.out ? (name = extReplacer(path.basename(fpath)), path.join(argv.out || '', name)) : extReplacer(path.basename(fpath));
    codes.push(new Code({
      from: fpath,
      to: outpath,
      code: code
    }));
  }
  if (argv.join) {
    outpath = path.join(argv.out || '', argv.join);
    joined = Code.join(codes, outpath);
    joined.write();
  } else {
    for (var i$1 = 0, length$1 = codes.length; i$1 < length$1; ++i$1) {
      code = codes[i$1];
      if (argv.print) {
        console.log(code.code);
      } else {
        code.write();
      }
    }
  }
  break;
case 'compile':
  Preprocessor = require('../lib/preprocessor').Preprocessor;
  literate = argv.literate;
  filepaths = argv._;
  result = '';
  codes = [];
  for (var i$2 = 0, length$2 = filepaths.length; i$2 < length$2; ++i$2) {
    fpath = filepaths[i$2];
    source = fs.readFileSync(fpath).toString();
    try {
      cs_ast = MambaScript.parse(source, {
        optimise: false,
        raw: true,
        sourceMap: true,
        inputSource: source,
        literate: literate
      });
    } catch (e$1) {
      e = e$1;
      console.error('Error at', fpath);
      throw e;
      process.exit(1);
    }
    if (argv.csast) {
      console.log(cs_ast);
      return;
    }
    if (argv.mscodegen) {
      console.log(mscodegen.generate(cs_ast));
      return;
    }
    js_ast = MambaScript.compile(cs_ast, { bare: !!argv.bare });
    code = MambaScript.js(js_ast);
    extReplacer = function (name) {
      return name.replace('.kofu', '.js').replace('.mamba', '.js');
    };
    outpath = argv.out ? (name = extReplacer(path.basename(fpath)), path.join(argv.out || '', name)) : extReplacer(path.basename(fpath));
    codes.push(new Code({
      from: fpath,
      to: outpath,
      code: code
    }));
  }
  if (argv.join) {
    outpath = path.join(argv.out || '', argv.join);
    joined = Code.join(codes, outpath);
    joined.write();
  } else {
    for (var i$3 = 0, length$3 = codes.length; i$3 < length$3; ++i$3) {
      code = codes[i$3];
      if (argv.print) {
        console.log(code.code);
      } else {
        code.write();
      }
    }
  }
  break;
case 'execute':
  fpath = null != argv.execute ? argv.execute : argv._[0];
  source = fs.readFileSync(fpath).toString();
  run(fpath, '`' + moduleCode + '`\n' + source);
  break;
case 'repl':
  repl.start();
}
