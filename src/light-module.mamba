{formatParserError} = require './helpers'
Nodes = require './nodes'
{Preprocessor} = require './preprocessor'
Parser = require './parser'
TypeWalker = require './type-walker'
{Optimiser} = require './optimiser'
{Compiler} = require './compiler'
reporter = require './reporter'
{TypeError} = require './type-helpers'
mscodegen = try require 'mambacodegen'
escodegen = try require 'escodegen'
ESMRewriter = require '../utils/esm'


pkg = require './../package.json'

escodegenFormat =
  indent:
    style: '  '
    base: 0
  renumber: yes
  hexadecimal: yes
  quotes: 'auto'
  parentheses: no

MambaScript =

  MambaScript: MambaScript
  Compiler: Compiler
  Optimiser: Optimiser
  Parser: Parser
  Preprocessor: Preprocessor
  Nodes: Nodes
  VERSION: pkg.version

  parse: (mamba, options = {}) ->
    try
      preprocessed = Preprocessor.process mamba, literate: options.literate
      parsed = Parser.parse preprocessed,
        raw: options.raw
        inputSource: options.inputSource
      # type check
      TypeWalker.checkNodes(parsed)
      if reporter.has_errors()
        throw new TypeError reporter.report()
      return (if options.optimise then Optimiser.optimise parsed else parsed)
    catch e
      throw e.message if e instanceof TypeError
      throw e unless e instanceof Parser.SyntaxError
      throw new Error formatParserError preprocessed, e

  esCompile: (mamba, options = {}) ->
    msAst = @parse mamba
    jsAST = @compile msAst, bare: true
    return @jsEsm jsAST

  compile: (msAst, options) ->
    (Compiler.compile msAst, options).toBasicObject()

  compileTypedToCS: (msAst, options) ->
    (mscodegen msAst)

  # TODO
  cs: (msAst, options) ->
    # TODO: opt: format (default: nice defaults)

  jsWithSourceMap: (jsAst, name = 'unknown', options = {}) ->
    # TODO: opt: minify (default: no)
    throw new Error 'escodegen not found: run `npm install escodegen`' unless escodegen?
    unless {}.hasOwnProperty.call jsAst, 'type'
      jsAst = jsAst.toBasicObject()
    targetName = options.sourceMapFile or (options.sourceMap and (options.output.match /^.*[\\\/]([^\\\/]+)$/)[1])
    escodegen.generate jsAst,
      comment: not options.compact
      sourceMapWithCode: yes
      sourceMap: name
      file: targetName or 'unknown'
      format: if options.compact then escodegen.FORMAT_MINIFY else options.format ? escodegenFormat

  jsEsm: (jsAst, options) ->
    code = (@jsWithSourceMap jsAst, null, options).code
    ESMRewriter code

  js: (jsAst, options) -> (@jsWithSourceMap jsAst, null, options).code

  sourceMap: (jsAst, name, options) -> (@jsWithSourceMap jsAst, name, options).map

  # Equivalent to original CS compile
  cs2js: (input, options = {}) ->
    options.optimise ?= on
    msAst = MambaScript.parse input, options
    jsAst = MambaScript.compile msAst, bare: options.bare
    MambaScript.js jsAst, compact: options.compact or options.minify

  smoothCompile: (input, options = {}) ->
    options.optimise ?= on
    msAst = MambaScript.parse input, options
    jsAst = MambaScript.compile msAst, bare: true
    MambaScript.jsEsm jsAst, compact: options.compact or options.minify

  svelteCompile: (input) ->
    options = {
      optimize: true
      bare: true
      header: true
      compact: true
    }
    @cs2js(input, options)

module.exports = MambaScript
