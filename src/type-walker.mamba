{debug} = require './helpers'
reporter = require './reporter'
MS = require './nodes'
_ = require 'lodash'

{checkType, checkTypeAnnotation }      = require './type-checker'
{resolveType, extendType }             = require './type-resolver'
{Scope, ClassScope, FunctionScope, ModuleScope}    = require './type-scope'
{initializeGlobalTypes, ImplicitAny }  = require './types'

# CS_AST -> Scope
checkNodes = (cs_ast) ->
  # dirty hack
  g = window ? global
  return unless cs_ast.body?.statements?

  if g._root_
    root = g._root_
  else
    g._root_ = root = new Scope
    root.name = 'root'
    initializeGlobalTypes(root)

  walk cs_ast, root
  return root

fromMemberAccessToRef = (node) ->
  if node instanceof MS.Identifier
    return node.data

  if node instanceof MS.This
    return '@'

  head = left: {}, right: node.memberName , nodeType: 'MemberAccess'
  cur = node.expression
  h = head.left
  parent = head

  while cur
    if cur instanceof MS.Identifier
      parent.left = cur.data
      break
    else if cur instanceof MS.This
      parent.left = '@'
      break
    else if cur instanceof MS.MemberAccessOp
      h.nodeType = 'MemberAccess'
      h = h.left = {}
      h.right = cur.memberName
      parent = h
    cur = cur.expression
  head

createIdentifier = (node) ->
  if node instanceof MS.Identifier
    typeRef: node.data
  else if node instanceof MS.MemberAccessOp
    ref = fromMemberAccessToRef node
    typeRef: ref
  else if _.isString node
    typeRef: node
  else
    node

mergeStruct = (left, list) ->
  for right in list
    for prop in right.properties
      left.properties.push prop
  left

walkStruct = (node, scope) ->
  s = _.cloneDeep node
  if node.implementArguments?.length
    extendList =
      for implArg in node.implementArguments
        scope.getTypeByIdentifier implArg.identifier
    s.expr = mergeStruct node.expr, extendList

  scope.addStructType s
  node.typeAnnotation = ImplicitAny

walkVardef = (node, scope) ->
  symbol = node.name.identifier.typeRef
  if (scope instanceof ClassScope) or (scope instanceof ModuleScope)
    # avoid 'constructor' because it's property has special action on EcmaScript
    if symbol is 'constructor'
      symbol = '_constructor_'

    unless val = scope.getThis symbol
      unless node.isStatic
        scope.addThis
          nodeType: 'variable'
          identifier:
            typeRef: symbol
            typeArguments: node.name?.identifier?.typeArguments
          typeAnnotation: node.expr
      else if scope instanceof ModuleScope # FIXME: need refactor
        scope.addThis
          nodeType: 'variable'
          identifier:
            typeRef: symbol
            typeArguments: node.name?.identifier?.typeArguments
          typeAnnotation: node.expr
    else
      if val.typeAnnotation.implicit and val.typeAnnotation.identifier.typeRef is 'Any'
        val.typeAnnotation = node.expr
      else
        reporter.add_error node, 'double bind: '+ symbol
  else
    unless val = scope.getVar symbol
      scope.addVar
        nodeType: 'variable'
        identifier:
          typeRef: symbol
          typeArguments: node.name?.identifier?.typeArguments
        typeAnnotation: node.expr
    else
      if val.typeAnnotation.implicit and val.typeAnnotation.identifier.typeRef is 'Any'
        val.typeAnnotation = node.expr
      else
        reporter.add_error node, 'double bind: '+ symbol

walkProgram = (node, scope) ->
  walk node.body.statements, scope
  node.typeAnnotation =
    identifier: createIdentifier('Program')

walkBlock = (node, scope) ->
  walk node.statements, scope
  returnables = scope.getReturnables()

  if _.last(node.statements)?.typeAnnotation
    lastAnn = (_.last node.statements).typeAnnotation
    returnables.push lastAnn

  node.typeAnnotation = scope.getHighestCommonType returnables

walkReturn = (node, scope) ->
  walk node.expression, scope
  if node.expression?.typeAnnotation?
    node.typeAnnotation = node.expression.typeAnnotation
    scope.addReturnable node.typeAnnotation

walkBinOp = (node, scope) ->
  walk node.left, scope
  walk node.right, scope

  [leftAnnotation, rightAnnotation] = [node.left.typeAnnotation, node.right.typeAnnotation].map (node) =>
    unless node? # FIXME
      return ImplicitAny

    if node.nodeType is 'identifier'
      scope.getTypeByNode(node)
    else if node.nodeType is 'primitiveIdentifier'
      node
    else if node.nodeType is 'members'
      node
    else if node.nodeType is 'functionType'
      node
    else
      throw node?.nodeType + " is not registered nodeType"

  leftRef = leftAnnotation?.identifier?.typeRef
  rightRef = rightAnnotation?.identifier?.typeRef

  # TODO: implicit
  if leftRef and rightRef
    if leftRef is 'String' or rightRef is 'String'
      node.typeAnnotation =
        implicit: true
        nodeType: 'primitiveIdentifier'
        identifier: createIdentifier('String')

    else if leftRef is 'Int' and rightRef is 'Int'
      node.typeAnnotation =
        implicit: true
        nodeType: 'primitiveIdentifier'
        identifier: createIdentifier('Int')

    else if leftRef in ['Int', 'Float'] and rightRef in ['Int', 'Float']
      node.typeAnnotation =
        implicit: true
        nodeType: 'primitiveIdentifier'
        identifier: createIdentifier('Float')
    else if leftRef in ['Int', 'Float', 'Number'] and rightRef in ['Int', 'Float', 'Number']
      node.typeAnnotation =
        implicit: true
        nodeType: 'primitiveIdentifier'
        identifier: createIdentifier('Number')
    else if leftRef is rightRef is 'Any'
      # TODO: Number or String
      if node instanceof MS.PlusOp
        node.typeAnnotation =
          implicit: true
          nodeType: 'primitiveIdentifier'
          identifier: createIdentifier('Any')
      else
        node.typeAnnotation =
          implicit: true
          nodeType: 'primitiveIdentifier'
          identifier: createIdentifier('Number')
    else
      # FIXME
      node.typeAnnotation ?= ImplicitAny

  else
    node.typeAnnotation = ImplicitAny

walkConditional = (node, scope) ->
  walk node.condition, scope #=> Expr
  if node.consequent
    walk node.consequent, scope #=> Block

  if node.alternate?
    walk node.alternate, scope #=> Block

  consequentAnnotation = node.consequent?.typeAnnotation
  alternateAnnotation = node.alternate?.typeAnnotation

  if consequentAnnotation and alternateAnnotation
    parentType = scope.getHighestCommonType [consequentAnnotation, alternateAnnotation]
    node.typeAnnotation = parentType
  else if consequentAnnotation and not alternateAnnotation
    ret = _.cloneDeep consequentAnnotation
    if ret.identifier?
      ret.identifier.nullable = true
    node.typeAnnotation = ret
  else
    node.typeAnnotation = ImplicitAny

walkSwitch = (node, scope) ->
  if node.expression
    walk node.expression, scope

  canditates = []
  for c in node.cases
    for cond in c.conditions
      walk c, scope #=> Expr
    if c.consequent
      walk c.consequent, scope
      canditates.push c.consequent.typeAnnotation

  if node.alternate
    walk node.alternate, scope #=> Block
    if c.alternate?.typeAnnotation?
      canditates.push c.alternate.typeAnnotation

  ann = scope.getHighestCommonType canditates

  if ann?
    node.typeAnnotation = ann ? ImplicitAny
  else
    node.typeAnnotation = ImplicitAny

walkNewOp = (node, scope) ->
  ctor = node.ctor?.ctor ? node.ctor
  args = node.ctor?.arguments ? node.arguments

  if ctor instanceof MS.Identifier
    ann = scope.getTypeByIdentifier createIdentifier(ctor)
  else if ctor instanceof MS.MemberAccessOp
    if ctor.expression?
      ns = fromMemberAccessToRef(ctor.expression)
      parentScope = scope.getParentModule().resolveNamespace ns
      if parentScope
        ann = parentScope.getType ctor.memberName
    ann ?= ImplicitAny

  # override types
  if ctor.typeArguments?.length
    givenArgs = ctor.typeArguments
    ann = extendType scope, _.cloneDeep(ann), givenArgs

  if ann
    ctorAnnotation = _.find ann.properties, (i) ->
      i.identifier?.typeRef is '_constructor_'

  # argument type check
  for arg, n in args
    walk arg, scope
    left = ctorAnnotation?.typeAnnotation?.arguments?[n]
    right = arg?.typeAnnotation
    if left and right
      checkTypeAnnotation scope, node, left, right

  node.typeAnnotation = ann ? ImplicitAny

walkOfOp = (node, scope) ->
  node.typeAnnotation ?= ImplicitAny
  return # TODO

walkModule = (node, scope) ->
  global._root_.hasModule = true
  if node.ident instanceof MS.Identifier
    if mod = scope.getModuleInScope(node.ident.data)
      moduleScope = mod
    else
      parentMod = scope.getParentModule()
      moduleScope = parentMod.addModule node.ident.data
  else if node.ident instanceof MS.MemberAccessOp
    ns = fromMemberAccessToRef(node.ident)
    moduleScope = scope.getParentModule().resolveNamespace ns, true
  walk node.body, moduleScope

walkFor = (node, scope) ->
  walk node.target, scope
  if node.valAssignee?
    preAnnotation = node?.valAssignee?.typeAnnotation
    walk node.valAssignee, scope
    # Override annotation if it is implicit Any
    if preAnnotation
      # TODO: type check
      node.valAssignee.typeAnnotation = preAnnotation
    else if node.target.typeAnnotation?.identifier?.isArray
      targetType = _.cloneDeep node.target.typeAnnotation
      delete targetType.identifier.isArray
      node.valAssignee.typeAnnotation = targetType
    else
      node.valAssignee.typeAnnotation = ImplicitAny

    scope.addVar
      nodeType: 'variable'
      identifier: createIdentifier(node.valAssignee)
      typeAnnotation: node.valAssignee.typeAnnotation

  if node.keyAssignee?
    if node instanceof MS.ForIn
      node.keyAssignee.typeAnnotation =
        nodeType: 'identifier'
        identifier: createIdentifier('Int')

      scope.addVar
        nodeType: 'variable'
        identifier: createIdentifier(node.keyAssignee)
        typeAnnotation:
          nodeType: 'identifier'
          identifier: createIdentifier('Int')
    else if node instanceof MS.ForOf
      # TODO: FIX later
      node.keyAssignee.typeAnnotation =
        nodeType: 'identifier'
        identifier: createIdentifier('String')
      scope.addVar
        nodeType: 'variable'
        identifier: createIdentifier(node.keyAssignee)
        typeAnnotation:
          nodeType: 'identifier'
          identifier: createIdentifier('String')
  # check body
  walk node.body, scope #=> Block

  if node.body?
    bodyType =  _.cloneDeep node.body.typeAnnotation

  if bodyType?.identifier
    if node.body?
      bodyType.identifier.isArray = true
      node.typeAnnotation = bodyType
    else
      node.typeAnnotation = ImplicitAny
  else
    node.typeAnnotation = ImplicitAny

walkClassProtoAssignOp = (node, scope) ->
  left  = node.assignee
  right = node.expression
  symbol = left.data

  if (right.instanceof MS.Function) and scope.getThis(symbol)
    annotation = scope.getThis(symbol)?.typeAnnotation
    # register before walk. for recursive call
    if annotation?
      left.typeAnnotation = annotation
      scope.addThis
        nodeType: 'variable'
        identifier: createIdentifier(left)
        typeAnnotation: annotation
    walkFunction right, scope, annotation
  else
    annotation =
      nodeType: 'variable'
      identifier: createIdentifier(left)
      typeAnnotation: null
    scope.addThis annotation
    walk right, scope

    if right.typeAnnotation
      annotation.typeAnnotation = right.typeAnnotation

walkCompoundAssignOp = (node, scope) ->
  node.typeAnnotation ?= ImplicitAny
  return # TODO

walkAssignOp = (node, scope) ->
  left  = node.assignee
  right = node.expression
  symbol = left.data

  preAnnotation = left.typeAnnotation #TODO: dirty...

  walk left, scope

  # Example
  #   add :: Int * Int -> Int
  #   add = (x, y) -> x + y
  if (right.instanceof MS.Function) and scope.getVarInScope(symbol)
    v = scope.getVarInScope(symbol)
    walkFunction right, scope, v.typeAnnotation
  else if (right.instanceof MS.Function) and preAnnotation
    walkFunction right, scope, preAnnotation
  else
    walk right, scope

  # Array initializer
  if left instanceof MS.ArrayInitialiser
    if right.typeAnnotation?.identifier?.typeRef is 'Any'
      '' # ignore case
    else
      if right instanceof MS.ArrayInitialiser
        for lprop, n in left.members
          rprop = right?.members?[n]
          if lprop and rprop # FIXME: right may be null
            checkType scope, node, lprop, rprop
      else if right.typeAnnotation?.identifier?.isArray
        for lprop, n in left.members
          rpropAnn = _.cloneDeep right.typeAnnotation
          delete rpropAnn.identifier.isArray
          if lprop and rpropAnn # FIXME: right may be null
            checkTypeAnnotation scope, node, lprop.typeAnnotation, rpropAnn

    for member in left.members
      symbol = member.data
      unless scope.getVarInScope(symbol)
        scope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(left)
          typeAnnotation: member.typeAnnotation

  # Destructive Assignment
  else if left instanceof MS.ObjectInitialiser
    if right.typeAnnotation?.identifier?.typeRef is 'Any'
      '' # ignore case
    else
      return unless checkType scope, node, left, right

    for member in left.members
      symbol = member.key.data
      unless scope.getVarInScope(symbol)
        scope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(left)
          typeAnnotation: member.typeAnnotation

  # Member
  else if left.instanceof MS.MemberAccessOp
    return unless checkType scope, node, left, right
  # Identifier
  else if left.instanceof MS.Identifier
    if scope.getVarInScope(symbol) and preAnnotation
      return reporter.add_error node, 'double bind: '+ symbol

    if left.typeAnnotation? and right.typeAnnotation?
      if left.typeAnnotation?.properties?
        return unless checkType scope, node, left, right
      else
        return unless checkType scope, node, left, right

    if preAnnotation?
      scope.addVar
        nodeType: 'variable'
        identifier: createIdentifier(left)
        typeAnnotation: preAnnotation

    else if right.typeAnnotation? and not right.typeAnnotation.implicit and left?.typeAnnotation.implicit
      left.typeAnnotation = right.typeAnnotation
      scope.addVar
        nodeType: 'variable'
        identifier: createIdentifier(left)
        typeAnnotation: right.typeAnnotation
    else
      scope.addVar
        nodeType: 'variable'
        identifier: createIdentifier(left)
        typeAnnotation: ImplicitAny
      left.typeAnnotation ?= ImplicitAny

  # Vanilla CS
  else
    return # TODO
    throw 'unexpected node:' + left?.className

walkPrimitives = (node, scope) ->
  switch
    # String
    when node.instanceof MS.String  then walkString node, scope
    # Bool
    when node.instanceof MS.Bool    then walkBool node, scope
    # Number
    when node.instanceof MS.Int then walkInt node, scope
    when node.instanceof MS.Float then walkFloat node, scope
    when node.instanceof MS.Numbers then walkNumbers node, scope
    when node.instanceof MS.Null then walkNull node, scope
    when node.instanceof MS.Undefined then walkUndefined node, scope

walkUndefined = (node, scope) ->
  node.typeAnnotation ?=
    implicit: true
    nodeType: 'identifier'
    identifier: createIdentifier('Undefined')

walkNull = (node, scope) ->
  node.typeAnnotation ?=
    implicit: true
    nodeType: 'identifier'
    identifier: createIdentifier('Null')

walkString = (node, scope) ->
  node.typeAnnotation ?=
    implicit: true
    nodeType: 'identifier'
    identifier: createIdentifier('String')

walkInt = (node, scope) ->
  node.typeAnnotation ?=
    nodeType: 'identifier'
    implicit: true
    identifier: createIdentifier('Int')

walkBool = (node, scope) ->
  node.typeAnnotation ?=
    nodeType: 'identifier'
    implicit: true
    identifier: createIdentifier 'Boolean'

walkFloat = (node, scope) ->
  node.typeAnnotation ?=
    nodeType: 'identifier'
    implicit: true
    identifier: createIdentifier 'Float'

walkNumbers = (node, scope) ->
  node.typeAnnotation ?=
    nodeType: 'identifier'
    implicit: true
    identifier: createIdentifier 'Number'


moduleToProperties = (mod) ->
  properties = _.cloneDeep mod._this
  mod._modules.forEach ({scope, identifier}) =>
    properties.push
      nodeType: 'moduleRef'
      identifier: _.cloneDeep identifier
      moduleId: scope.id
  _.cloneDeep properties

walkIdentifier = (node, scope) ->
  if val = scope.getVarInScope(node.data)
    typeAnnotation = val?.typeAnnotation
    node.typeAnnotation = typeAnnotation ? ImplicitAny
  else if mod = scope.getModuleInScope(node.data)
    properties = moduleToProperties(mod)
    node.typeAnnotation =
      nodeType: 'members'
      properties: properties
      identifier: createIdentifier('[module]')
  else
    node.typeAnnotation ?= ImplicitAny

walkThis = (node, scope) ->
  node.typeAnnotation =
    nodeType: 'members'
    implicit: true
    identifier: createIdentifier('[this]')
    properties: _.cloneDeep scope._this

walkDynamicMemberAccessOp = (node, scope) ->
  node.typeAnnotation ?= ImplicitAny
  return # TODO

walkDynamicProtoMemberAccessOp = (node, scope) ->
  node.typeAnnotation ?= ImplicitAny
  return # TODO

walkProtoMemberAccessOp = (node, scope) ->
  node.typeAnnotation ?= ImplicitAny
  return # TODO

walkMemberAccess = (node, scope) ->
  walk node.expression, scope
  if type = scope.getTypeByNode(node.expression.typeAnnotation)
    member = _.find type.properties, (prop) => prop.identifier?.typeRef is node.memberName
    if member?
      if member.nodeType is 'moduleRef'

        mod = scope.findModuleById(member.moduleId)
        unless mod?
          throw 'unresolved module:'+member.moduleId

        props = moduleToProperties(mod)
        node.typeAnnotation =
          properties: props
          nodeType: 'members'
          identifier: createIdentifier mod.name
      else
        node.typeAnnotation = member.typeAnnotation
    node.typeAnnotation ?= member?.typeAnnotation

  node.typeAnnotation ?= ImplicitAny

walkArrayInializer = (node, scope) ->
  for member in node.members
    walk member, scope
  ann = scope.getHighestCommonType node.members.map (m) -> m.typeAnnotation

  if ann?.identifier?
    ann.identifier.isArray = true
  node.typeAnnotation = ann

walkRange = (node, scope) ->
  node.typeAnnotation =
    nodeType: 'identifier'
    implicit: true
    identifier:
      typeRef: 'Int'
      isArray: true

walkObjectInitializer = (node, scope) ->
  obj = {}
  nextScope = new Scope scope
  nextScope.name = 'object'

  props = []

  for {expression, key} in node.members when key?
    walk expression, nextScope
    props.push
      implicit: true
      identifier: createIdentifier(key)
      nodeType: 'identifier'
      typeAnnotation: expression.typeAnnotation

  node.typeAnnotation ?=
    properties: props
    nodeType: 'members'
    implicit: true
    identifier: createIdentifier '[object]'

walkClass = (node, scope) ->
  classScope = new ClassScope scope
  className = null

  isThis = false

  if node?.nameAssignee instanceof MS.Identifier
    walk node.nameAssignee, scope
    ident = createIdentifier node.nameAssignee
    className = ident?.typeRef.right ? ident?.typeRef ? '_class' + _.uniqueId()
    if ns = ident.typeRef.left
      parentScope = scope.resolveNamespace ns, true
  else if node?.nameAssignee instanceof MS.MemberAccessOp
    ref = fromMemberAccessToRef node.nameAssignee #.expression
    className = ref.right
    if ref.left in ['@', 'this']
      isThis = true
    else
      parentScope = scope.getParentModule().resolveNamespace ref.left, true

  className ?= '[unnamed-class]'+_.uniqueId()
  staticAnn =
    properties: []
    nodeType: 'members'
    implicit: true
    identifier:
      typeRef: className

  classScope.name = className

  # resolve at new
  if node.typeArguments?.length
    for arg in node.typeArguments
      classScope.addType
        nodeType: 'identifier'
        identifier:
          typeRef: arg.identifier.typeRef

  # has parent class?
  if node.implementArguments?.length
    for implArg in node.implementArguments
      parentAnnotation = scope.getTypeByIdentifier(implArg.identifier) # TODO: member access
      if parentAnnotation?.properties?.length
        parentAnnotation?.properties?.map (prop) ->
          classScope.addThis _.cloneDeep(prop)

  # has parent class?
  if node.parent?
    # TODO: member access
    # TODO: static extend
    if parentStaticAnnotation = scope.getVarInScope(node.parent.data)
      # should be clone?
      if parentStaticAnnotation?.typeAnnotation?.properties?.length
        for prop in parentStaticAnnotation.typeAnnotation.properties
          staticAnn.properties.push _.cloneDeep(prop)

    parentAnnotation = scope.getTypeByIdentifier(createIdentifier node.parent)
    if parentAnnotation
      parentAnnotation.properties.map (prop) ->
        classScope.addThis _.cloneDeep(prop)

  # collect @values first for recursive
  if node.body?.statements?
    for statement in node.body.statements when statement.nodeType is 'vardef'
      if statement.isStatic
        staticAnn.properties.push
          nodeType: 'variable'
          identifier: _.cloneDeep statement.name.identifier
          typeAnnotation: _.cloneDeep statement.expr
      else
        walkVardef statement, classScope

  val =
    nodeType: 'variable'
    identifier:
      typeRef: className
    typeAnnotation: staticAnn

  if isThis
    scope.addThis val
    parentScope?.addThis val
  else
    scope.addVar val

  (parentScope ? scope).addType
    nodeType: 'members'
    newable: true
    identifier:
      typeRef: className
      typeArguments: node.typeArguments ? []
    properties: _.map _.cloneDeep(classScope._this), (prop) ->
      prop.nodeType = 'identifier' # hack for type checking
      prop

  # constructor
  if node.ctor?
    walkFunction node.ctor.expression, classScope, classScope.getConstructorType()

  # walk
  if node.body instanceof MS.Block
    for statement in node.body.statements when statement.nodeType isnt 'vardef'
      walk statement, classScope

# TODO: move
addValuesByInitializer = (scope, initializerNode, preAnnotation = null) ->
  if initializerNode instanceof MS.ArrayInitialiser
    for member in initializerNode.members
      symbol = member.data
      unless scope.getVar(symbol)
        scope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(member)
          typeAnnotation: member.typeAnnotation ? ImplicitAny
  else if initializerNode instanceof MS.ObjectInitialiser
    for member in initializerNode.members
      unless scope.getVar(symbol)
        scope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(member.key)
          typeAnnotation: member.typeAnnotation ? ImplicitAny

# walkFunction :: Node * Scope * TypeAnnotation? -> ()
walkFunction = (node, scope, preAnnotation = null) ->
  functionScope = new Scope scope
  if scope instanceof ClassScope # TODO: fat arrow
    functionScope._this = scope._this

  if node instanceof MS.BoundFunction
    functionScope._this = scope._this

  if preAnnotation?
    if node.typeAnnotation?
      annotation = _.cloneDeep node.typeAnnotation
      annotation.returnType ?= ImplicitAny
      annotation.arguments ?= annotation.arguments?.map (arg) -> arg ? ImplicitAny
      annotation.arguments ?= []
      return unless checkTypeAnnotation scope, node,  annotation, preAnnotation

    node.typeAnnotation = preAnnotation
    node.parameters?.map (param, n) ->
      if param.typeAnnotation?
        return unless checkTypeAnnotation scope, node, preAnnotation.arguments[n], param.typeAnnotation
      # FIXME: we should always walk param
      if param instanceof MS.MemberAccessOp
        walk param, functionScope

      param.typeAnnotation ?= preAnnotation.arguments?[n] ? ImplicitAny
      if param instanceof MS.Identifier
        functionScope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(param)
          typeAnnotation: param.typeAnnotation
      else if param instanceof MS.Rest
        preLastArg = preAnnotation.arguments[n]
        argType = _.cloneDeep preLastArg
        delete argType.identifier.splats
        argType.identifier.isArray = true
        param.typeAnnotation = argType
        functionScope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(param.expression)
          typeAnnotation: param.typeAnnotation

      # getX :: Int[] -> Int = ([x, y]) -> x
      else if param instanceof MS.ArrayInitialiser
        preAnn = preAnnotation.arguments?[n]
        if preAnn
          for member in param.members
            type =  _.cloneDeep resolveType scope, preAnn
            type.identifier.isArray = false
            if type.nodeType is 'primitiveIdentifier'
              t = _.cloneDeep preAnn
              delete t.identifier.isArray
              member.typeAnnotation = t
            else
              member.typeAnnotation = type ? ImplicitAny

        addValuesByInitializer scope, param
      # f :: Point -> Int = ({x, y}) -> Int
      else if param instanceof MS.ObjectInitialiser
        preAnn = preAnnotation.arguments?[n]
        if preAnn
          for member in param.members
            type =  resolveType scope, preAnn
            if type.nodeType is 'members'
              memberAnn =  _.find type.properties, (prop) -> prop.identifier?.typeRef is member.key?.data
              member.typeAnnotation = memberAnn?.typeAnnotation ? ImplicitAny
        addValuesByInitializer scope, param

  else
    node.parameters?.map (param, n) ->
      walk param, functionScope
      if param instanceof MS.Identifier
        functionScope.addVar
          nodeType: 'variable'
          identifier: createIdentifier(param)
          typeAnnotation: param.typeAnnotation ? ImplicitAny
      else if param instanceof MS.ObjectInitialiser
        addValuesByInitializer scope, param
      else if param instanceof MS.ArrayInitialiser
        addValuesByInitializer scope, param

  if node.body?
    if node.body instanceof MS.Function
      walkFunction node.body, functionScope, node.typeAnnotation.returnType
    else
      walk node.body, functionScope

    unless preAnnotation
      if node.typeAnnotation?
        node.typeAnnotation.returnType = node.body.typeAnnotation

    node.typeAnnotation ?=
      implicit: true
      nodeType: 'functionType'
      returnType: null
      arguments: []

    left = node.typeAnnotation.returnType ?= ImplicitAny
    right = node.body.typeAnnotation ?= ImplicitAny
    return unless checkTypeAnnotation scope, node, left, right


walkFunctionApplication = (node, scope) ->
  walk node.function, scope

  for arg, n in node.arguments
    walk arg, scope

  type = scope.getVarInScope node.function.data
  if type?.identifier?.typeArguments?.length
    typeScope = new Scope scope
    typeArguments = node.function.typeArguments
    for arg, n in type.identifier?.typeArguments
      givenArg = typeArguments?[n]
      typeScope.addType
        nodeType: 'identifier'
        identifier: _.cloneDeep arg.identifier
        typeAnnotation:
          nodeType: 'identifier'
          identifier: _.cloneDeep givenArg.identifier

    node.function.typeAnnotation = extendType typeScope, _.cloneDeep(node.function.typeAnnotation)

  if node.function.typeAnnotation?.nodeType is 'functionType'
    node.typeAnnotation = node.function.typeAnnotation.returnType ? ImplicitAny
  else if node.function.typeAnnotation?.nodeType is 'primitiveIdentifier'
    node.typeAnnotation ?= ImplicitAny

  splatsType = null
  for arg, n in node.arguments
    left = node.function.typeAnnotation?.arguments?[n]
    right = arg?.typeAnnotation

    if left?.identifier?.splats
      splatsType = _.clone left
      delete splatsType.identifier.splats

    left ?= splatsType

    if arg instanceof MS.Function
      if node.function.typeAnnotation?.identifier?.typeRef isnt 'Any'
        preAnn = node.function.typeAnnotation?.arguments?[n]
        if preAnn
          # walk arg again to build annotation by new arguments
          for param, i in arg.parameters
            a = preAnn.arguments[i]
            param.typeAnnotation = preAnn.arguments[i]
          delete arg.typeAnnotation
          delete arg.body.typeAnnotation
          walkFunction arg, scope, preAnn
          right = preAnn

    if left and right
      checkTypeAnnotation scope, node, left, right

# Traverse all nodes
# Node -> void
walk = (node, scope) ->
  return unless node?
  # console.error 'walking node:', node?.className, node?.raw
  switch
    # undefined(mayby null body)
    when not node? then return
    # Nodes Array
    when node.length?                    then  walk s, scope for s in node
    # Struct
    # Dirty hack on Number
    when node.nodeType is 'struct'       then walkStruct node, scope
    when node.nodeType is 'vardef'       then walkVardef node, scope
    # Program
    when node.instanceof MS.Program      then walkProgram node, scope
    # Module
    when node.instanceof MS.Module       then walkModule node, scope
    # Block
    when node.instanceof MS.Block        then walkBlock node, scope
    # Retrun
    when node.instanceof MS.Return       then  walkReturn node, scope
    # New
    when node.instanceof MS.NewOp        then  walkNewOp node, scope
    # BinaryOperator
    when node.instanceof(MS.PlusOp) or node.instanceof(MS.MultiplyOp) or node.instanceof(MS.DivideOp) or node.instanceof(MS.SubtractOp)
      walkBinOp node, scope

    # === Controlle flow ===
    # Switch
    when node.instanceof MS.Switch then walkSwitch node, scope
    # If
    when node.instanceof MS.Conditional  then walkConditional node, scope

    when node.instanceof MS.Undefined         then walkUndefined node, scope

    when node.instanceof MS.OfOp              then walkOfOp node, scope
    # For
    when (node.instanceof MS.ForIn) or (node.instanceof MS.ForOf) then walkFor node, scope
    # Primitives
    when node.instanceof MS.Primitives        then walkPrimitives node, scope
    when node.instanceof MS.Null              then walkNull node, scope
    # This
    when node.instanceof MS.This              then walkThis node, scope
    # Identifier
    when node.instanceof MS.Identifier        then walkIdentifier node, scope
    # ClassProto
    when node.instanceof MS.ClassProtoAssignOp then walkClassProtoAssignOp node, scope
    # MemberAccessOps TODO: imperfect
    when node.instanceof MS.DynamicProtoMemberAccessOp
      walkDynamicProtoMemberAccessOp node, scope
    when node.instanceof MS.DynamicMemberAccessOp then walkDynamicMemberAccessOp node, scope
    when node.instanceof MS.ProtoMemberAccessOp then walkProtoMemberAccessOp node, scope
    when node.instanceof MS.MemberAccessOps   then walkMemberAccess node, scope
    # Array
    when node.instanceof MS.ArrayInitialiser  then walkArrayInializer node, scope
    # Range
    when node.instanceof MS.Range             then walkRange node, scope
    # Object
    when node.instanceof MS.ObjectInitialiser then walkObjectInitializer node, scope
    # Class
    when node.instanceof MS.Class             then walkClass node, scope
    # Function
    when (node.instanceof MS.Function) or node.instanceof MS.BoundFunction then walkFunction node, scope
    # FunctionApplication
    when node.instanceof MS.FunctionApplication then walkFunctionApplication node, scope
    # left.typeAnnotation.identifier
    when node.instanceof MS.CompoundAssignOp then walkCompoundAssignOp node, scope
    when node.instanceof MS.AssignOp then walkAssignOp node, scope

module.exports = {checkNodes}
